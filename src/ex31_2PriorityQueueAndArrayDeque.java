/*
–ú–µ—Ç–æ–¥—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π Queue

–û—á–µ—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞—é—â—É—é –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO (first in - first out).
–¢–æ –µ—Å—Ç—å —á–µ–º —Ä–∞–Ω—å—à–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ç–µ–º —Ä–∞–Ω—å—à–µ –æ–Ω –∏–∑ –Ω–µ–µ —É–¥–∞–ª—è–µ—Ç—Å—è.
–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
–û–¥–Ω–∞–∫–æ –±—ã–≤–∞—é—Ç –∏ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ - —Ç–æ –µ—Å—Ç—å —Ç–∞–∫–∏–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–æ, –Ω–æ –∏ –≤ –∫–æ–Ω–µ—Ü.
–ò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–Ω—Ü–∞, –Ω–æ –∏ –∏–∑ –Ω–∞—á–∞–ª–∞.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é –∫–ª–∞—Å—Å–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –æ–Ω–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã Queue –∏–ª–∏ Deque.

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Queue
–û–±–æ–±—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Queue<E> —Ä–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Collection –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ
–æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
–°–≤–æ—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
void add(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
boolean offer(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç obj –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ - false
E element(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç, —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E peek(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null
E remove(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E poll(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —É –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –±—É–¥–µ—Ç –º–µ—Ç–æ–¥ offer –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å,
–º–µ—Ç–æ–¥ poll –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≥–æ–ª–æ–≤—ã –æ—á–µ—Ä–µ–¥–∏, –∏ –º–µ—Ç–æ–¥—ã peek –∏ element, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≥–æ–ª–æ–≤—ã –æ—á–µ—Ä–µ–¥–∏.

–û–ø–µ—Ä–∞—Ü–∏–∏ —Å Queue
1. add() - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏.
–ü–æ–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º - —Ç.–µ. PriorityQueue - —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–æ–Ω–µ—Ü, –∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º

2. remove() –∏ poll() - —É–¥–∞–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏.

3. offer() - –ø—ã—Ç–∞–µ—Ç—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏.

4. peek() –∏ element() - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏

remove() –∏ poll() - —É–¥–∞–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –¢–∞–∫ —Å–∫–∞–∑–∞—Ç—å, "–¢—Ä–∏ —á–∞—Å–∞ –∂–¥—É - –Ω–∞–¥–æ–µ–ª–æ, –∏–¥—É –¥–æ–º–æ–π!" üôÇ
–ù–æ –≤ —á–µ–º –º–µ–∂–¥—É –Ω–∏–º–∏ —Ä–∞–∑–Ω–∏—Ü–∞?
–£ –º–µ—Ç–æ–¥–∞ remove() –µ—Å—Ç—å –¥–≤–µ —Ñ–æ—Ä–º—ã - remove() –∏ remove(Object o), –∞ —É poll() - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞.
–í –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º–µ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –æ–Ω–∏ —É–±–∏—Ä–∞—é—Ç "–≥–æ–ª–æ–≤—É" (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç) –æ—á–µ—Ä–µ–¥–∏. –û–±–µ–∑–≥–ª–∞–≤–ª–∏–≤–∞—é—Ç —Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å üôÇ
–ù–æ remove(Object o) –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–±–∏—Ä–∞—Ç—å –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ä—Ö—É. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å –¥–≤–æ–π–∫—É - –æ–Ω–∞ –ª–µ–∂–∏—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ—á–µ—Ä–µ–¥–∏
–ú–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É –µ—Å–ª–∏ —É –Ω–∞—Å –ø—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å.
- —Ö–æ—Ç–∏—Ç–µ Exception (—Ç.–µ. –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) - –±–µ—Ä–∏—Ç–µ remove() - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å 1
- –Ω–µ —Ö–æ—Ç–∏—Ç–µ - –±–µ—Ä–∏—Ç–µ poll() (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å 0

offer() - –ø—ã—Ç–∞–µ—Ç—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏. –° –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ "offer" –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å".
–ü–æ—á–µ–º—É "–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º"? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—è—Ö —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
—É –Ω–∞—Å –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å.

peek() (–æ—Ç –∞–Ω–≥–ª. "–ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å"), –∏ element() - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏.



–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deque
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deque —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Queue –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏,
–∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å, –ª–∏–±–æ –∫–∞–∫ —Å—Ç–µ–∫, –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—à–µ–ª - –ø–µ—Ä–≤—ã–π –≤—ã—à–µ–ª).
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deque –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:

void addFirst(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
void addLast(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç obj –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
boolean offerFirst(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç obj –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ - false
boolean offerLast(E obj): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç obj –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ - false

E getFirst(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≥–æ–ª–æ–≤—ã –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E getLast(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E peekFirst(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null
E peekLast(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null

E removeFirst(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E removeLast(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ü–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
E pollFirst(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null
E pollLast(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ null

E pop(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NoSuchElementException
void push(E element): –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏

boolean removeFirstOccurrence(Object obj): —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç obj –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑—à–ª–æ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
boolean removeLastOccurrence(Object obj): —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç obj –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑—à–ª–æ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ pop –∏ push –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∞—Å—Å–∞–º, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–µ–∫–∞.
–í —Ç–æ –∂–µ –≤—Ä–µ–º—è –∏–º–µ—é—â–∏–π—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª–∞—Å—Å—ã,
–ø—Ä–∏–º–µ–Ω—è—é—â–∏–µ –¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –¥–æ–≤–æ–ª—å–Ω–æ –≥–∏–±–∫–∏–º–∏.

–ö–ª–∞—Å—Å ArrayDeque
–í Java –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä—è–¥–æ–º –∫–ª–∞—Å—Å–æ–≤. –û–¥–∏–Ω –∏–∑ –Ω–∏—Ö - –∫–ª–∞—Å—Å ArrayDeque<E>.
–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –æ–±–æ–±—â–µ–Ω–Ω—É—é –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–∞—Å–ª–µ–¥—É—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç –∫–ª–∞—Å—Å–∞ AbstractCollection –∏ –ø—Ä–∏–º–µ–Ω—è—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deque.
–í –∫–ª–∞—Å—Å–µ ArrayDeque –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã:
1) ArrayDeque(): —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å
2) ArrayDeque(Collection<? extends E> col): —Å–æ–∑–¥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ col
3) ArrayDeque(int capacity): —Å–æ–∑–¥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –µ–º–∫–æ—Å—Ç—å—é capacity. –ï—Å–ª–∏ –º—ã —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –µ–º–∫–æ—Å—Ç—å, —Ç–æ –µ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 16
 */

import java.util.*;

public class ex31_2PriorityQueueAndArrayDeque {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞—Ç—å
        Queue queueA = new LinkedList();
        Queue queueB = new PriorityQueue();

        // –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        queueA.add("element 1");
        queueA.add("element 2");
        queueA.add("element 3");

        // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        Object firstElement2 = queueA.element();
        Object firstElement = queueA.peek();

        // –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è firstElement –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç value 1, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏.
        // Peek() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –º–µ—Ç–æ–¥ element (), –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null

        //access via Iterator
        Iterator iterator = queueA.iterator();
        while (iterator.hasNext()) {
            String element =(String) iterator.next();
            System.out.println(element);
        }
        Iterator iterator1 = queueA.iterator(); // –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞–¥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        for (int i = 0; i < queueA.size(); i++) {
            String element = (String) iterator1.next();
            System.out.println(element);
        }
        //access via new for-loop
        for (Object object : queueA) {
            String element = (String) object;
            System.out.println(element);
        }
        // –ò—Å—Ç–æ—á–Ω–∏–∫: https://java-blog.ru/collections/queue-java

        // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º - —á–∏—Å–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        PriorityQueue<Integer> myPriorityQueue = new PriorityQueue<Integer>();
        myPriorityQueue.add(1);
        myPriorityQueue.add(2);
        myPriorityQueue.add(3);
        myPriorityQueue.add(0);
        myPriorityQueue.add(30);
        for(int pq : myPriorityQueue) {
            System.out.println(pq);
        }
//        queueB.addAll(Arrays.asList(new Integer[] {20, 30, 40, 50, 60, 70, 80, 90}));
//        myPriorityQueue.addAll(queueB); // –¥–≤–µ PriorityQue –±—É–¥—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫–∞–∫ –ø–æ–ø–∞–ª–æ
//        myPriorityQueue.addAll(Arrays.asList(new Integer[] {1, 2, 3, 4, 5})); // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–ª–∏ –º–∞—Å—Å–∏–≤ - –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∫–∞–∫ –ø–æ–ø–∞–ª–æ
        for(int pq : myPriorityQueue) {
            System.out.println(pq);
        }
        System.out.println(myPriorityQueue.toString());
        String str = Arrays.toString(myPriorityQueue.toArray());
        System.out.println(str);


        ArrayDeque<String> states = new ArrayDeque<String>();
        // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        states.add("Germany");
        states.addFirst("France"); // –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
        states.push("Great Britain"); // –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
        states.addLast("Spain"); // –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        states.add("Italy");

        // –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
        String sFirst = states.getFirst();
        System.out.println(sFirst);     // Great Britain
        // –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
        String sLast = states.getLast();
        System.out.println(sLast);      // Italy

        System.out.printf("Queue size: %d \n", states.size());  // 5

        // –ø–µ—Ä–µ–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        while(states.peek()!=null){
            // –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ c –Ω–∞—á–∞–ª–∞
            System.out.println(states.pop());
        }

        // –æ—á–µ—Ä–µ–¥—å –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ Person
        ArrayDeque<Person_1> people = new ArrayDeque<Person_1>();
        people.addFirst(new Person_1 ("Tom"));
        people.addLast(new Person_1 ("Nick"));
        // –ø–µ—Ä–µ–±–æ—Ä –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        for(Person_1 p : people){

            System.out.println(p.getName());
        }
    }
}
class Person_1 {

    private final String name;
    public Person_1 (String value) {
        name=value;
    }
    String getName() {
        return name;
    }
}

