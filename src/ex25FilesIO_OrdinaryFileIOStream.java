/*
Класс FileOutputStream предназначен для записи байтов в файл.
Он является производным от класса OutputStream, поэтому наследует всю его функциональность.
Через конструктор класса FileOutputStream задается файл, в который производится запись.
Класс поддерживает несколько конструкторов:
1) FileOutputStream(String filePath)
2) FileOutputStream(File fileObj)
3) FileOutputStream(String filePath, boolean append)
4) FileOutputStream(File fileObj, boolean append)

Файл задается либо через строковый путь, либо через объект File.
Если объекта File нет, то он будет автоматически создан при записи.
Строку перед записью надо сначала перевести в массив байтов, так как OutputStream работает с байтами.
Второй параметр - append задает способ записи: eсли он равен true,
то данные дозаписываются в конец файла, а при false - файл полностью перезаписывается

Для автоматического закрытия файла и освобождения ресурса объект FileOutputStream
создается с помощью конструктции try...catch.
Или не помещается, если прописать в сигнатуре метода throws IOException

При этом необязательно записывать весь массив байтов. Используя перегрузку метода write(),
можно записать и одиночный байт:
fos.write(buffer[0]); // запись первого байта

Для считывания данных из файла предназначен класс FileInputStream,
который является наследником класса InputStream и поэтому реализует все его методы.
Для создания объекта FileInputStream мы можем использовать ряд конструкторов.
Наиболее используемая версия конструктора в качестве параметра принимает путь к считываемому файлу:
1) FileInputStream(String fileName) throws FileNotFoundException
Если файл не может быть открыт, например, по указанному пути такого файла не существует,
то генерируется исключение FileNotFoundException.

В одном случае мы считываем каждый отдельный байт в переменную i:
while((i = fin.read()) != -1) {
Когда в потоке больше нет данных для чтения, метод возвращает число -1.
Затем каждый считанный байт конвертируется в объект типа char и выводится на консоль.
Подобным образом можно считать данные в массив байтов и затем производить с ним манипуляции.

В другом случае с помощью метода read() считываем данные в массив buffer длиной 256 байтов.
Метод возвращает количество считанных байтов.
Поскольку файл может быть больше 256 байтов, то считываем в цикле while до конца файла.
Когда больше не останется файлов для считывания, то метод возвратит -1.
while((count = fin.read(buffer)) != -1) {
Поскольку количество считанных байтов/размер файла могут быть меньше 256 байт,
то реальное количество считанных байт сохраняем в переменную count.
Затем выводим считанное количество данных на консоль в цикле for.

Классы FileInputStream и FileOutputStream предназначены прежде всего для записи двоичных файлов,
то есть для записи и чтения байтов. И хотя они также могут использоваться для работы с текстовыми файлами,
но все же для этой задачи больше подходят другие классы.
 */

import java.io.*;

public class ex25FilesIO_OrdinaryFileIOStream {

    public static void main(String[] args) throws IOException {

        String text = "Hi, Fedulovna!"; // строка для записи
        FileOutputStream fos = new FileOutputStream("C:\\JavaEx\\OrdinaryIOS.txt");
        byte[] buffer = text.getBytes(); // перевод строки в байты
        fos.write(buffer, 0, buffer.length); // запись в буфер строки
        System.out.println("The file has been written");
        fos.close();

        // считываем по 1 байту и выводим символы из файла
        FileInputStream fin = new FileInputStream("C:\\JavaEx\\OrdinaryIOS.txt"); // считываем этот файл
        int i; // считываем каждый отдельный байт в переменную i
        while((i = fin.read()) != -1){ // когда в потоке больше нет данных для чтения, метод возвращает число -1
            System.out.print((char) i); // выводим в консоль байт, преобразовав его в символ
        }
        System.out.print("\n");
        fin.close();

        // считываем кусок в буфер и выводим символы из файла
        FileInputStream fin1 = new FileInputStream("C:\\JavaEx\\OrdinaryIOS.txt");
        FileOutputStream fos1 = new FileOutputStream("C:\\JavaEx\\OrdinaryIOSwritten.txt");
        byte[] buff = new byte[256]; // считываем файл кусками по 256 байт в буфер
        int count;
        while((count = fin1.read(buff)) != -1) { // возвращает в count значение типа int равное кол-ву считанных в кусок байт - все по 256, оставшийся - меньше
            for (int j = 0; j < count; j++) {
                System.out.print((char) buff[j]); // печатает считанный кусок байтов, преобразованный в символы
            }
            fos1.write(buff, 0, count); // считывает и записываем новый кусок в новый файл, пока есть в файле, что читать
        }
        fin1.close();
        fos1.close(); // автоматически скидывает буфер (flush) в новый файл при закрытии
    }
}