/* Начиная с версии 1.4 в Java предоставляется вторая система ввода-вывода
под названием NIO (сокращение от New I/O — новый ввод-вывод).
В этой системе поддерживается канальный подход к операциям ввода-вывода, ориентированный на применение буферов.

А в версии JDK 7 система ввода-вывода NIO была существенно расширена, и теперь она оказывает улучшенную поддержку
средств обработки файлов и файловых систем. Изменения в этой системе настолько значительны, что она нередко
обозначается термином NIO.2.

Система ввода-вывода NIO построена на двух основополагающих элементах: буферах и каналах.
В буфере хранятся данные, а канал предоставляет открытое соединение с устройством ввода-вывода (файлом или сокетом).
Для применения системы ввода-вывода NIO требуется получить канал для устройства ввода-вывода и буфер для хранения данных.
После этого можно обращаться с буфером, вводя или выводя данные по мере необходимости.

Каналы определены в пакете java.nio.channels.
Канал представляет открытое соединение с источником или адресатом ввода-вывода.
Классы каналов реализуют интерфейс Channel, расширяющий интерфейс Closeable, а начиная с JDK 7 — интерфейс AutoCloseable.
При реализации интерфейса AutoCloseable каналами можно управлять в блоке оператора try с ресурсами,
где канал закрывается автоматически, когда он больше не нужен.
Конкретный тип возвращаемого канала зависит от типа объекта, для которого вызывается метод getChannel().
Для объекта типа FileInputStream, FileOutputStream или RandomAccessFile,
он возвращает канал типа FileChannel.
А если этот метод вызывается для объекта типа Socket, то он возвращает канал типа SocketChannel.
В каналах типа FileChannel и SocketChannel поддерживаются различные методы read() и write(),
которые позволяют выполнять операции ввода-вывода через канал.

Интерфейс Path - наиболее важное дополнение системы ввода-вывода NIO, поскольку он инкапсулирует путь к файлу -
описывает расположение файла в структуре каталогов.
Интерфейс Path служит связующим звеном для большинства новых файловых средств в системе ввода-вывода NIO.2,
находится в пакете java.nio. file, наследует интерфейсы Watchable, Iterable<Path> и Comparable<Path>.
Интерфейс Watchable описывает объект, который можно наблюдать и изменять.
В интерфейсе Path объявляется немало методов для манипулирования путями к файлам.
Обрати особое внимание на метод getName(). Он служит для получения элемента пути.
С этой целью в данном методе применяется индекс.
Нулевому значению индекса соответствует ближайшая к корневому каталогу часть пути, являющаяся его крайним слева элементом.
Последующие индексы определяют элементы вправо от корневого каталога.
Количество элементов в пути может быть получено в результате вызова метода getNameCount().
Если же требуется получить строковое представление всего пути, достаточно вызвать метод toString().
Следует также заметить, что для распознавания относительного и абсолютного пути достаточно вызвать метод resolve().

Класс Files предоставляет статические методы для выполнения различных действий над файлами.
Путь к файлу, над которым выполняются определенные действия, задает объект типа Path, передаваемый в методы.
В классе Files имеются следующие методы:
1) для открытия или создания файла по указанному пути
2) для получения сведений о файле - является ли он исполняемым, скрытым или доступным только для чтения
3) для копирования или перемещения файла
В версии JDK 8 класс Files дополнен следующими четырьмя методами: list(), walk(), lines() и find().
Все эти методы возвращают объект типа Stream. Они способствуют интеграции системы ввода-вывода NIO
с новым прикладным программным интерфейсом API потоков ввода-вывода, определенным в версии JDK 8.

Класс Files выбрасывает исключения нескольких типов помимо исключения типа IOException.
В приведенном ниже примере программы все изложенное выше демонстрируется на практике.
В этой программе данные из файла test.txt читаются через канал посредством явных операций ввода.
*/

// Использовать канал ввода-вывода для чтения файла.
// Требуется установка комплекта JDK, начиная с версии 7
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;

public class ex27NIO {
    public static void main(String[] args) {
        int count;
        Path filepath = null;

        // сначала получить путь к файлу
        try {
            filepath = Paths.get("test.txt");
        } catch (InvalidPathException e) {
            System.out.println("Path Error " + e);
            return;
        }

        // затем получить канал к этому файлу в
        // блоке оператора try с ресурсами
        try (SeekableByteChannel fChan = Files.newByteChannel(filepath)) {

            // выделить память под буфер
            ByteBuffer mBuf = ByteBuffer.allocate(128);

            do {
                // читать данные из файла в буфер
                count = fChan.read(mBuf);

                // прекратить чтение по достижении конца файла
                if (count != -1) {

                    // подготовить буфер к чтению из него данных
                    mBuf.rewind();

                    // читать байты данных из буфера и
                    // выводить их на экран как символы
                    for (int i = 0; i < count; i++)
                        System.out.print((char) mBuf.get());
                }
            } while (count != -1);

            System.out.println();
        } catch (IOException e) {
            System.out.println("Ошибка ввода-вывода " + e);
        }
    }
}
